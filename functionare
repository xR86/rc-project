TODO0.0. script instalare bash_aliases & other stuff ...
0.1. makefile din client && server => make all
0.2. compilare bash_aliases client && server => silent_ea
0.3. curatare alias vechi: unalias rc-server ; unalias rc-client

1. [server] deschide: rc-server
	-> o singura optiune: --verbose
2. [server] verifica daca exista openssl instalat (posibil sa fie facut cu comanda propriu zisa, cu versiune sau cu "which"
	-> daca nu, instaleaza: apt-get install openssl
		-> trateaza exceptie in caz ca nu se instaleaza
	-> daca da, executa: openssl genrsa -out key-priv.txt 2048
		-> trateaza exceptie in caz ca nu se genereaza

3. [server] creeaza cheie publica: openssl rsa -in key-priv.txt -pubout >key.pub
	-> trateaza exceptie daca nu se creeaza

4. [client] deschide: rc-client 127.0.0.1 <port>
5. [client] repeta pasii 2 si 3 pt client
6. schimbul de chei, prin socket: (registration)
	-> brut, pt testare: 
		- client: cp ../server/key.pub key-server.pub
		- server: cp ../client/key.pub key-client.pub
	-> cum se vor salva cheile de client pe server? (name policy -> fragment de MAC/IP adaugat la sfarsitul numelui cheii)

7. [server] criptarea mesajului de transmis prin: echo "optiuni: ..." | openssl rsautl -pubin -inkey key-client.pub -encrypt >fisier.bin

8. [server] transmis prin socket la client
	-> brut, pt testare: cp ../server/fisier.bin fisier-server.bi
9. [client] decriptare: openssl rsautl -inkey key-priv.txt -decrypt <fisier-client.bin #nu este neaparat nevoie de redirectare de output: >fisier-decriptat.txt
10. [client] alege optiunea de download, cripteaza si trimite serverului, serverul va transmite prompturi clientului:
	optiune (wget or get): __
	depth(wget only)(not 0, 1-5): __
	files-only(Y/N): ___

wgetTODO11. cauta fisier stackoverflow cu metode de rezolvare, paseaza prin execlp int-urile de mai sus

GET-TODO11. parseaza pt <a href="stuff"
		-> incearca sa mimezi depth si files-only de la wget prin GET


15?-fa interfata qt-webkit



